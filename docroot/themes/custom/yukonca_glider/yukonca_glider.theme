<?php

/**
 * @file
 * Theme specific functionality.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Markup;
use Drupal\Core\StringTranslation\ByteSizeMarkup;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_html().
 */
function yukonca_glider_preprocess_html(&$variables) {
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if ($logged_in) {
    $variables['#attached']['library'][] = 'yukonca_glider/administrator';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_links__language_block(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Remove the active language from the list.
  unset($variables['links'][$language]);
}

/**
 * Implements template_preprocess_comment.
 */
function yukonca_glider_preprocess_comment(&$variables) {
  $date_formatter = \Drupal::service('date.formatter');
  $comment = $variables['elements']['#comment'];
  $variables['created'] = $date_formatter->format($comment->getCreatedTime(), 'medium_format');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_branding_block') {
    $logo_file = $variables['site_logo'];
    $pathinfo = pathinfo($logo_file);
    $variables['site_footer_logo'] = $pathinfo['dirname'] . '/images/svg/logo-white.svg';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_page__node__blog(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  $taxonomy_entity_manager = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  if ($node->hasField('field_blog_type') && !$node->get('field_blog_type')->isEmpty()) {
    $tid = $node->get('field_blog_type')->target_id;
    $blog_type_term = $taxonomy_entity_manager->load($tid);
    if ($blog_type_term && $blog_type_term->hasField('field_agency_logo') && !$blog_type_term->get('field_agency_logo')->isEmpty()) {
      $variables['logo_url'] = $blog_type_term->get('field_agency_logo')->view();
    }
  }

  $variables['blog_category_subcategory'] = [];
  if ($node->hasField('field_category') && !$node->get('field_category')->isEmpty()) {
    $category_term = $taxonomy_entity_manager->load($node->get('field_category')->target_id);
    $variables['blog_category_subcategory'][] = $category_term->getName();
  }

  if ($node->hasField('field_subcategory') && !$node->get('field_subcategory')->isEmpty()) {
    $subcategory_term = $taxonomy_entity_manager->load($node->get('field_subcategory')->target_id);
    $variables['blog_category_subcategory'][] = $subcategory_term->getName();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function yukonca_glider_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node instanceof NodeInterface) {
    return;
  }

  $suggestions[] = 'page__node__' . $node->bundle();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_node__landing_page(&$variables) {
  if (!isset($variables['node']) && !isset($variables['view_mode'])) {
    return;
  }
  $view_mode = $variables['view_mode'];
  if ($view_mode !== 'primary_item_block') {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  if (!$node->hasField('field_primary_content') || $node->get('field_primary_content')->isEmpty()) {
    return;
  }
  // Render only the first three links in field_primary_content.
  $links = $node->get('field_primary_content')->getValue();
  foreach ($links as $key => $link) {
    if ($key > 2) {
      $variables['content']['field_primary_content'][$key]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_node__department(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  if (!$node->hasField('field_department_term') || $node->get('field_department_term')->isEmpty()) {
    return;
  }
  $department_tid = $node->get('field_department_term')->target_id;
  $latest_news_view['view'] = [
    '#type' => 'view',
    '#name' => 'news_listing',
    '#display_id' => 'block_department_latest_news',
    '#arguments' => [$department_tid],
  ];

  $readmore_url = '/news?field_department_term_target_id=' . $department_tid;
  $latest_news_view['read_more'] = $readmore_url;
  $variables['view_latest_news'] = $latest_news_view;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_node__campground_directory_record(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  $availability_fields = [
    'field_may_availability',
    'field_june_availability',
    'field_july_availability',
    'field_august_availability',
    'field_september_availability',
  ];

  $availability = [];
  $is_empty_chart = TRUE;
  foreach ($availability_fields as $field_name) {
    if (!$node->hasField($field_name)) {
      continue;
    }

    $field = $node->get($field_name);
    $title = $field->getFieldDefinition()->getLabel();
    $title = str_replace(' availability', '', $title);
    $availability[] = [
      'title' => $title,
      'value' => $field->value,
    ];

    if ($field->value != 'na') {
      $is_empty_chart = FALSE;
    }
  }

  if ($is_empty_chart) {
    $variables['availability'] = $variables['content']['field_campground_site_type'][0]['#plain_text'];
  }
  else {
    $variables['availability'] = $availability;
  }

  $services_fields = [
    'field_outhouse_unisex',
    'field_bear_proof_garbage_bins',
    'field_bear_proof_recycling_bins',
    'field_picnic_tables',
    'field_cook_shelter',
    'field_fire_ring',
    'field_bear_proof_cache',
    'field_boat_launch',
    'field_boat_dock',
    'field_hiking_trails',
    'field_playground',
    'field_at_least_one_wheelchair_ac',
    'field_one_wheelchair_camp',
    'field_hand_pump_or_water_tank_pr',
    'field_sandy_or_cobble_beach_with',
    'field_viewing_structures_or_sign',
    'field_interpretive_centre',
    'field_group_campsite',
    'field_tent_pads_or_sites_availab',
    'field_swimming_area_or_dock_no_l',
    'field_change_room',
    'field_outdoor_ampitheatre',
    'field_walk_in_sites',
  ];
  $available_services = [];
  foreach ($services_fields as $field_name) {
    if (!$node->hasField($field_name)) {
      continue;
    }
    $field = $node->get($field_name);
    $field_name = $field->getName();
    $field_name = str_replace('field_', '', $field_name);
    $available_services[] = [
      'name' => $field_name,
      'title' => $field->getFieldDefinition()->getLabel(),
      'value' => $field->value,
    ];
  }

  $variables['available_services'] = $available_services;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_node__multi_step_page(&$variables) {
  $section_paragraphs = array_column($variables["content"]["field_paragraphs"], '#paragraph');
  $node = $variables['node'];

  $variables['tabs']['items'] = [];
  foreach ($section_paragraphs as $paragraph) {
    $variables['tabs']['items'][] = [
      'title' => $paragraph->get('field_title')->getString(),
      'content' => $paragraph->get('field_section_content')->value,
    ];
  }

  $variables['tabs']['links_icon_type'] = $node->get('field_sequential_non_sequential')
    ->getString();
  // Use for pills ID.
  $variables['tabs']['id'] = Html::getUniqueId($node->getTitle());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yukonca_glider_preprocess_node__documents(&$variables) {
  $node = $variables['node'];
  if ($node->hasField('field_document_upload') && !$node->get('field_document_upload')->isEmpty()) {
    $media_file = $node->get('field_document_upload')->entity;
    if (!empty($media_file) && $media_file->hasField('field_media_file') && !$media_file->get('field_media_file')->isEmpty()) {
      $file = \Drupal::entityTypeManager()
        ->getStorage('file')
        ->load($media_file->get('field_media_file')->getString());
      if (!empty($file)) {
        $variables['document_size'] = ByteSizeMarkup::create($file->getSize() ?? 0);
        $variables['document_type'] = str_replace('application/', '', $file->getMimeType());
      }
    }
  }
}

/**
 * Implements template_proprocess_page().
 */
function yukonca_glider_preprocess_page(&$variables) {
  if (!empty($variables['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $variables['node'];

    $variables['content_type'] = $node->bundle();
    if ($node->bundle() == 'topics_page') {
      $variables['type'] = "topics_page";
    }

    if ($node->bundle() == 'basic_page') {
      $variables['type'] = "basic_page";
    }

    // Do not show at Homepage.
    $current_path = \Drupal::service('path.current')->getPath();
    $current_alias = \Drupal::service('path_alias.manager')->getAliasByPath("/node/{$node->id()}");
    $front_page_setting = \Drupal::getContainer()->get('config.factory')->get('system.site')->get('page.front');
    if (empty($variables['is_front']) && $front_page_setting != $current_path && $front_page_setting != $current_alias) {
      // Get node modified date and populate it to display at the bottom of the
      // page in template files.
      $modified_date = $node->get('changed')->value;
      $variables['node_date_modified'] = t(
        'Date modified: @date',
        ['@date' => \Drupal::getContainer()->get('date.formatter')->format($modified_date, 'custom', 'Y-m-d')]
      );
    }

    if (!$node->hasField('field_icon_dark') || $node->get('field_icon_dark')->isEmpty()) {
      return;
    }

    if ($variables['node']->bundle() == 'blog' || $variables['node']->bundle() == 'landing_page' || $variables['node']->bundle() == 'landing_page_level_2') {
      $tid = $node->field_blog_type->target_id;
      if (!empty($tid)) {
        $blog_type_term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($tid);
        if (!empty($blog_type_term->field_agency_logo && !empty($blog_type_term->field_agency_logo[0]))) {
          $image = $blog_type_term->field_agency_logo[0]->view([
            'type' => 'entity_reference_entity_view',
            'label' => 'hidden',
          ]);
          $variables['logo_url'] = $image;
        }
      }

      $variables['blog_category_subcategory'] = [];
      if (!empty($node->field_category->target_id)) {
        $category_term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($node->field_category->target_id);
        array_push($variables['blog_category_subcategory'], $category_term->getName());
      }

      if (!empty($node->field_subcategory->target_id)) {
        $subcategory_term = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->load($node->field_subcategory->target_id);
        array_push($variables['blog_category_subcategory'], $subcategory_term->getName());
      }

      $variables['header_image'] = $node->get('field_icon_dark')->view([
        'type' => 'entity_reference_entity_view',
        'label' => 'hidden',
      ]);
    }
  }
}

/**
 * Implements template_preprocess_file_link().
 *
 * Use the media entity name as file link text if there is no description.
 */
function yukonca_glider_preprocess_file_link(&$variables) {
  if (is_string($variables['link'])) {
    return;
  }
  if (is_object($variables['link'])) {
    // Ensure we are working with a renderable array, as that's
    // just easier.
    $variables['link'] = $variables['link']->toRenderable();
  }
  $icon = '<i class="fa fa-download" aria-hidden="true"></i>';
  $filename = $variables['link']['#title'];
  $link_text = Markup::create('<span class="link-text flex-grow mr-2">Download</span><span class="icon">' . $icon . '</span>');
  $variables['link']['#title'] = $link_text;
  $variables['link']['#attributes']['class'][] = 'btn btn-outline-primary';
  $variables['link']['#attributes']['target'] = '_blank';
  $variables['filename'] = $filename;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Limit the text length of the last breadcrumb item.
 */
function yukonca_glider_preprocess_breadcrumb(&$variables) {
  $route = \Drupal::routeMatch();
  $node = $route->getParameter('node');
  if ($node instanceof NodeInterface) {
    $max_length = 100;
    $index = array_key_last($variables['breadcrumb']);
    $title = $variables['breadcrumb'][$index]['text'];
    if (strlen($title) > $max_length) {
      $variables['breadcrumb'][$index]['text'] = substr($title, 0, $max_length) . '...';
    }
    // Add the cache tag to update the breadcrumb if the node title changes.
    $nid = \Drupal::routeMatch()->getRawParameter('node');
    $variables['#cache']['tags'][] = 'node:' . $nid;
  }
}
