<?php

/**
 * @file
 * Yukon w3 migrate module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function yukon_w3_custom_theme() {
  return [
    'edit_language' => [
      'variables' => ['item' => NULL, 'language' => NULL],
      'template' => 'edit-language',
    ],
    'engagements_count' => [
      'variables' => ['item' => NULL],
      'template' => 'engagements-count',
    ],
    'blog_feed' => [
      'variables' => ['language' => NULL, 'tid' => NULL],
      'template' => 'blog-feed',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function yukon_w3_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $vid = 'teams';
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $term_data[$term->tid] = $term->name;
  }

  if (isset($form['field_yukon_editorial_team'])) {
    $form['field_yukon_editorial_team']['widget']['#options'] = $term_data;
  }
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $form['#attached']['library'][] = 'yukon_w3_custom/yukon_w3_custom.css';
  }
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $query = \Drupal::database()->select('users_field_data', 't');
    $query->fields('t', ['uid', 'name']);
    $query->condition('status', '1');
    $query->orderBy('name', 'ASC');
    $query->join('user__roles', 'n', 't.uid = n.entity_id');
    $query->condition('roles_target_id', ['publisher', 'editor'], 'IN');
    $result = $query->execute()->fetchAll();

    $user_id = ["_none" => "- None -"];
    foreach ($result as $res) {
      $user_id[$res->uid] = $res->name;
    }

    $form['field_editor_publisher']['widget']['#options'] = $user_id;

    $query = \Drupal::database()->select('users_field_data', 't');
    $query->fields('t', ['uid', 'name']);
    $query->condition('status', '1');
    $query->orderBy('name', 'ASC');
    $query->join('user__roles', 'n', 't.uid = n.entity_id');
    $query->condition('roles_target_id', 'publisher');
    $result = $query->execute()->fetchAll();

    $user_id = ["_none" => "- None -"];
    foreach ($result as $res) {
      $user_id[$res->uid] = $res->name;
    }

    $form['field_publisher']['widget']['#options'] = $user_id;
  }
}

/**
 * Implements hook_views_data().
 */
function yukon_w3_custom_views_data() {
  $data = [];

  $data['views']['month_filter'] = [
    'title' => t('Month filter - Custom Filter'),
    'filter' => [
      'title' => t('Month filter - Custom Filter'),
      'field' => 'created',
      'id' => 'month_filter',
    ],
  ];

  $data['views']['year_filter'] = [
    'title' => t('Year filter - Custom Filter'),
    'filter' => [
      'title' => t('Year filter - Custom Filter'),
      'field' => 'created',
      'id' => 'year_filter',
    ],
  ];

  $data['views']['event_month_filter'] = [
    'title' => t('Event Month filter - Custom Filter'),
    'filter' => [
      'title' => t('Event Month filter - Custom Filter'),
      'field' => 'field_event_start_time_value',
      'id' => 'event_month_filter',
    ],
  ];

  $data['views']['event_year_filter'] = [
    'title' => t('Event Year filter - Custom Filter'),
    'filter' => [
      'title' => t('Event Year filter - Custom Filter'),
      'field' => 'field_event_start_time_value',
      'id' => 'event_year_filter',
    ],
  ];

  return $data;
}

/**
 * Implements hook_page_attachments().
 */
function yukon_w3_custom_page_attachments(array &$page) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node)) {
    if (isset($node->field_collapsible_items)) {
      $items = $node->field_collapsible_items->getValue();
      $chart_data = [];
      foreach ($items as $item) {
        $p = Paragraph::load($item['target_id']);
        $chart = Paragraph::load($p->field_paragraphs->target_id);
        if (!empty($chart)) {
          $chart_data[$chart->id()] = $chart->field_chart_data->value;
        }

      }
      $page['#attached']['drupalSettings']['chart_data'] = $chart_data;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function yukon_w3_custom_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  if ($view->id() == 'events_listing') {
    $community = $view->exposed_data['field_community_target_id'];
    $category = $view->exposed_data['field_category_target_id'];
    if ($view->exposed_data['field_community_target_id'] != 'All') {
      $term = Term::load($view->exposed_data['field_community_target_id']);
      $community = $term->getName();
    }

    if ($view->exposed_data['field_category_target_id'] != 'All') {
      $term = Term::load($view->exposed_data['field_category_target_id']);
      $category = $term->getName();
    }

    $variables['community'] = $community;
    $variables['category'] = $category;

    $variables['community_filter'] = $view->exposed_data['field_community_target_id'];
    $variables['category_filter'] = $view->exposed_data['field_category_target_id'];
    $variables['year'] = $view->exposed_data['event_year_filter'];
    $variables['month'] = $view->exposed_data['event_month_filter'];
    $variables['team'] = $view->exposed_data['field_yukon_editorial_team_target_id'];

  }
  if ($view->id() == 'places_listing') {
    $title = $view->exposed_data['title'];
    $community_facility = $view->exposed_data['field_community_facility_type_target_id'];
    $community = $view->exposed_data['field_community_target_id'];

    if ($view->exposed_data['field_community_target_id'] != 'All' && $view->exposed_data['field_community_target_id'] != '') {
      $term = Term::load($view->exposed_data['field_community_target_id']);
      $community = $term->getName();
    }

    if ($view->exposed_data['field_community_facility_type_target_id'] != 'All' && $view->exposed_data['field_community_facility_type_target_id'] != '') {
      $term = Term::load($view->exposed_data['field_community_facility_type_target_id']);
      $community_facility = $term->getName();
    }

    if ($view->exposed_data['title'] != '') {
      $title = $view->exposed_data['title'];
    }

    $variables['community'] = $community;
    $variables['community_facility'] = $community_facility;
    $variables['title_output'] = $title;

    $variables['community_filter'] = $view->exposed_data['field_community_target_id'];
    $variables['community_facility_filter'] = $view->exposed_data['field_community_facility_type_target_id'];
    $variables['title_filter'] = $view->exposed_data['title'];
  }
  if ($view->id() == 'documents_browse') {
    $title = $view->exposed_data['combine'];
    $department = $view->exposed_data['field_department_term_target_id'];
    $category = $view->exposed_data['field_category_target_id'];

    if ($view->exposed_data['field_department_term_target_id'] != 'All' && $view->exposed_data['field_department_term_target_id'] != '') {
      $term = Term::load($view->exposed_data['field_department_term_target_id']);
      $department = $term->getName();
    }

    if ($view->exposed_data['field_category_target_id'] != 'All' && $view->exposed_data['field_category_target_id'] != '') {
      $term = Term::load($view->exposed_data['field_category_target_id']);
      $category = $term->getName();
    }

    if ($view->exposed_data['combine'] != '') {
      $title = $view->exposed_data['combine'];
    }

    $variables['department'] = $department;
    $variables['category'] = $category;
    $variables['combine_output'] = $title;

    $variables['department_filter'] = $view->exposed_data['field_department_term_target_id'];
    $variables['category_filter'] = $view->exposed_data['field_category_target_id'];
    $variables['combine_filter'] = $view->exposed_data['combine'];

    // Add translatable header text for page_1 display.
    if ($view->current_display == 'page_1') {
      $variables['forms_header_text'] = t('This list includes Government of Yukon online and document forms.');
    }
  }

  if ($view->id() == 'find_a_campground_or_recreation_site') {
    // dump($view->exposed_data); die;.
    $department = $view->exposed_data['region'];
    $site_type = $view->exposed_data['site_type'];
    $campsite = !is_array($view->exposed_data['wheelchair_accessible_campsite']) ? $view->exposed_data['wheelchair_accessible_campsite'] : $view->exposed_data['wheelchair_accessible_campsite'][1];
    $ac_value = !is_array($view->exposed_data['field_at_least_one_wheelchair_ac_value']) ? $view->exposed_data['field_at_least_one_wheelchair_ac_value'] : $view->exposed_data['field_at_least_one_wheelchair_ac_value'][1];
    $launch_value = !is_array($view->exposed_data['field_boat_launch_value']) ? $view->exposed_data['field_boat_launch_value'] : $view->exposed_data['field_boat_launch_value'][1];
    $trails = !is_array($view->exposed_data['field_hiking_trails_value']) ? $view->exposed_data['field_hiking_trails_value'] : $view->exposed_data['field_hiking_trails_value'][1];
    $playground = !is_array($view->exposed_data['field_playground_value']) ? $view->exposed_data['field_playground_value'] : $view->exposed_data['field_playground_value'][1];
    $dock_no = !is_array($view->exposed_data['field_swimming_area_or_dock_no_l_value']) ? $view->exposed_data['field_swimming_area_or_dock_no_l_value'] : $view->exposed_data['field_swimming_area_or_dock_no_l_value'][1];

    if ($view->exposed_data['region'] != 'All' && $view->exposed_data['region'] != '') {
      $term = Term::load($view->exposed_data['region']);
      $department = $term->getName();
    }
    if ($view->exposed_data['site_type'] != 'All' && $view->exposed_data['site_type'] != '') {
      $term = Term::load($view->exposed_data['site_type']);
      $site_type = $term->getName();
    }
    if (!is_array($view->exposed_data['wheelchair_accessible_campsite'])) {
      $campsite = 'Wheelchair accessible campsite';
    }
    if (!isset($view->exposed_data['field_at_least_one_wheelchair_ac_value'][1])) {
      $ac_value = 'Wheelchair accessible outhouse';
    }
    if (!isset($view->exposed_data['field_boat_launch_value'][1])) {
      $launch_value = 'Boat launch';
    }
    if (!isset($view->exposed_data['field_hiking_trails_value'][1])) {
      $trails = 'Hiking trails';
    }
    if (!isset($view->exposed_data['field_playground_value'][1])) {
      $playground = 'Playground';
    }
    if (!isset($view->exposed_data['field_swimming_area_or_dock_no_l_value'][1])) {
      $dock_no = 'Swimming area or dock';
    }
    $variables['department'] = $department;
    if (isset($view->exposed_data['site_type'])) {
      $variables['site_type'] = $site_type;
    }
    else {
      $variables['site_type'] = 'All';
    }
    $variables['campsite'] = $campsite;
    $variables['ac_value'] = $ac_value;
    $variables['launch_value'] = $launch_value;
    $variables['playground'] = $playground;
    $variables['trails'] = $trails;
    $variables['dock_no'] = $dock_no;

    $variables['department_filter'] = $view->exposed_data['region'];
    $variables['site_type_filter'] = $view->exposed_data['site_type'];
    $variables['campsite_flter'] = !is_array($view->exposed_data['wheelchair_accessible_campsite']) ? $view->exposed_data['wheelchair_accessible_campsite'] : $view->exposed_data['wheelchair_accessible_campsite'][1];
    $variables['ac_value_flter'] = !is_array($view->exposed_data['field_at_least_one_wheelchair_ac_value']) ? $view->exposed_data['field_at_least_one_wheelchair_ac_value'] : $view->exposed_data['field_at_least_one_wheelchair_ac_value'][1];
    $variables['launch_value_flter'] = !is_array($view->exposed_data['field_boat_launch_value']) ? $view->exposed_data['field_boat_launch_value'] : $view->exposed_data['field_boat_launch_value'][1];
    $variables['playground_flter'] = !is_array($view->exposed_data['field_playground_value']) ? $view->exposed_data['field_playground_value'] : $view->exposed_data['field_playground_value'][1];
    $variables['trails_flter'] = !is_array($view->exposed_data['field_hiking_trails_value']) ? $view->exposed_data['field_hiking_trails_value'] : $view->exposed_data['field_hiking_trails_value'][1];
    $variables['dock_no_flter'] = !is_array($view->exposed_data['field_swimming_area_or_dock_no_l_value']) ? $view->exposed_data['field_swimming_area_or_dock_no_l_value'] : $view->exposed_data['field_swimming_area_or_dock_no_l_value'][1];
  }
}

/**
 * Implements hook_views_query_alter().
 */
function yukon_w3_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() === 'documents_browse' && $view->current_display === 'page_1') {
    // Apply exposed filters to both OR filter groups.
    // This allows one exposed filter to work across both content types.
    $exposed_input = $view->getExposedInput();

    // Find Group 1 (basic_page/multi_step_page group) in the where conditions.
    // Views uses the group numbers from config as array keys.
    // Group 1 in config = $query->where[1] (basic_page, multi_step_page).
    // Group 2 in config = $query->where[2] (documents).
    if (!isset($query->where[1])) {
      \Drupal::logger('yukon_w3_custom')->warning('Group 1 not found in query');
      return;
    }

    // Apply department filter to Group 1 if it exists and has a value.
    // (Department exposed filter is in Group 2, so we copy it to Group 1).
    if (!empty($exposed_input['field_department_term_target_id']) && $exposed_input['field_department_term_target_id'] !== 'All') {
      $query->where[1]['conditions'][] = [
        'field' => 'node__field_department_term.field_department_term_target_id',
        'value' => [$exposed_input['field_department_term_target_id']],
        'operator' => 'in',
      ];
    }

    // Apply category filter to Group 1 if it exists and has a value.
    if (!empty($exposed_input['field_category_target_id']) && $exposed_input['field_category_target_id'] !== 'All') {
      $query->where[1]['conditions'][] = [
        'field' => 'node__field_category.field_category_target_id',
        'value' => [$exposed_input['field_category_target_id']],
        'operator' => 'in',
      ];
    }

    // Apply combine filter to BOTH groups if it exists and has a value.
    if (!empty($exposed_input['combine'])) {
      // The combine filter uses different fields for each content type:
      // For basic pages (G1): field_form_title, field_form_meta_description.
      // For documents (G2): title and body.
      $search_value = $exposed_input['combine'];
      $escaped_search = \Drupal::database()->escapeLike($search_value);

      // Add to Group 1 (basic_page/multi_step_page).
      // Search field_form_title, field_form_meta_description for basic pages.
      $query->addWhereExpression(1, "(node__field_form_title.field_form_title_value LIKE :search_value_g1 OR node__field_form_meta_description.field_form_meta_description_value LIKE :search_value_g1)", [
        ':search_value_g1' => '%' . $escaped_search . '%',
      ]);

      // Add to Group 2 (documents).
      // Search title and body for documents.
      $query->addWhereExpression(2, "(node_field_data.title LIKE :search_value_g2 OR node__body.body_value LIKE :search_value_g2)", [
        ':search_value_g2' => '%' . $escaped_search . '%',
      ]);
    }

    // Add a computed field for sorting using IFNULL.
    // For documents: use field_last_updated if it exists,
    // otherwise use changed timestamp.
    // basic pages: use changed timestamp (field_last_updated doesn't exist).
    // We use 'changed' as a tiebreaker to ensure items edited on the same
    // day are sorted by time.
    // field_last_updated only stores date (no time),
    // so we use changed for time precision.
    $formula = 'IFNULL(UNIX_TIMESTAMP(node__field_last_updated.field_last_updated_value), node_field_data.changed)';

    // Clear the existing orderby from the view configuration.
    $query->orderby = [];

    // Primary sort: by the computed date field.
    $query->addOrderBy(NULL, $formula, 'DESC', 'computed_sort_date');

    // Secondary sort: by changed timestamp for items with the same date.
    // This ensures proper ordering when multiple items have the same
    // field_last_updated date.
    $query->addOrderBy('node_field_data', 'changed', 'DESC', 'changed_tiebreaker');
  }
}

/**
 * Implements hook_views_post_execute().
 */
function yukon_w3_custom_views_post_execute(ViewExecutable $view) {
  // Sort documents_browse page_1 by computed date field.
  // This runs after query execution but before paging is applied.
  if ($view->id() === 'documents_browse' && $view->current_display === 'page_1') {
    // Compute sort date for each row..
    foreach ($view->result as &$row) {
      if (isset($row->_entity)) {
        $entity = $row->_entity;

        // Check if entity has field_last_updated and it has a value.
        if ($entity->hasField('field_last_updated') && !$entity->get('field_last_updated')->isEmpty()) {
          // field_last_updated is a datetime field, convert to
          // timestamp for comparison.
          $date_value = $entity->get('field_last_updated')->value;
          $row->computed_sort_date = strtotime($date_value);
        }
        else {
          // Fall back to created timestamp (already a timestamp).
          $row->computed_sort_date = $entity->get('created')->value;
        }
      }
    }

    // Now sort the results by the computed date in descending order.
    usort($view->result, function ($a, $b) {
      return $b->computed_sort_date <=> $a->computed_sort_date;
    });
  }
}

/**
 * Implements hook_views_pre_render().
 */
function yukon_w3_custom_views_pre_render(ViewExecutable $view) {
  // Check for a specific view and display.
  if ($view->id() == 'news_listing' && $view->current_display == 'block_news_listing') {

    foreach ($view->result as &$row) {
      if (isset($row->_entity)) {
        // Modify the value of a field (e.g., title).
        $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
        if ($langcode == 'fr') {
          $row->_entity->getTranslation('fr')->set('created', $row->_entity->created->value);
        }
      }
    }
  }
}
