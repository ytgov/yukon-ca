<?php

/**
 * @file
 * Controls the migration process.
 */

use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;
use Drupal\node\Plugin\migrate\source\d7\Node;
use Drupal\node\Plugin\migrate\source\d7\NodeEntityTranslation;
use Drupal\taxonomy\Plugin\migrate\source\d7\Term;

/**
 * Implements hook_migrate_prepare_row().
 *
 * @throws \Exception
 */
function yukon_migrate_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $migration_type = ($source instanceof Node or $source instanceof NodeEntityTranslation) ? 'node' : NULL;
  if (empty($migration_type)) {
    $migration_type = $source instanceof Term ? 'taxonomy_term' : NULL;
  }

  if ($migration_type === 'node') {
    $uuid = trim($row->getSourceProperty('uuid'));
    if (empty($uuid)) {
      $uuidService = \Drupal::service('uuid');
      $row->setSourceProperty('uuid', $uuidService->generate());
    }
  }

  /** @var \Drupal\Core\Database\Connection $database */
  $database = $source->getDatabase();

  // Get and set into source property Pathauto and Moderation State.
  if (!empty($migration_type)) {
    $id = $row->getSourceProperty('tid');
    if (empty($id)) {
      $id = $row->getSourceProperty('nid');
      $vid = $row->getSourceProperty('vid');
      empty($id) ? ($id = $row->getSourceProperty('entity_id')) : NULL;
    }

    if (!empty($id)) {
      $query = $database->select('pathauto_state', 'ps')
        ->fields('ps', ['pathauto', 'entity_id'])
        ->fields('w', [
          'from_state',
          'state',
        ]);
      $query->condition('ps.entity_type', $migration_type);
      $query->condition('ps.entity_id', $id);
      $query->leftJoin('workbench_moderation_node_history', 'w', '[ps].[entity_id] = [w].[nid]');
      $result = $query->execute()->fetchAssoc();

      if (!empty($result)) {
        yukon_migrate_set_pathauto_value($result, $row);
      }

      // Set workbench moderation status.
      if ($migration_type === 'node' && !empty($vid)) {
        $workbench_moderation = $query->condition('w.vid', $vid)
          ->orderBy('stamp', 'DESC')
          ->execute()
          ->fetchAssoc();

        if (!empty($workbench_moderation)) {
          $row->setSourceProperty('moderation_state', [
            'current' => $workbench_moderation['state'],
            'state' => $workbench_moderation['from_state'],
          ]);
        }
      }

      // Set Alias source property.
      $query = $database->select('url_alias', 'ua');
      $query->fields('ua', ['alias']);
      $query->condition('source', str_replace('_', '/', $migration_type) . '/' . $id);
      $query->condition('language', $row->getSourceProperty('language'));
      $query->orderBy('pid', 'DESC');
      $alias = $query->execute()
        ->fetchField();

      if (!empty($alias)) {
        $row->setSourceProperty('alias', '/' . $alias);
      }
    }
  }
}

/**
 * Set the Boolean value for PathAuto.
 *
 * @param array $result
 *   Query result.
 * @param \Drupal\migrate\Row $row
 *   Migrate row.
 *
 * @throws \Exception
 */
function yukon_migrate_set_pathauto_value(array $result, Row $row) {
  $pathauto = isset($result['pathauto']) && $result['pathauto'] === '1';
  $row->setSourceProperty('pathauto', $pathauto);
}
